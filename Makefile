PROTO_FILE=admins.proto
PROTO_DIR=pkg/proto
OUT_DIR=.
.PHONY: lint

#img_db:
#	docker build -f Dockerfile.bd -t todo-db-with-migrations .
#
#build_db: img_db
#	docker compose up -d db
gen:
	protoc --go_out=$(OUT_DIR) --go-grpc_out=$(OUT_DIR) $(PROTO_DIR)/$(PROTO_FILE)

#lint:
#	golangci-lint run --timeout 2m


# ========= Config =========
#PROJECT_NAME ?= todo
#SERVICE      ?= db
#IMAGE_NAME   ?= todo-db-with-migrations
#COMPOSE      ?= docker compose
#
## –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º .env (POSTGRES_DB, POSTGRES_USER, POSTGRES_PASSWORD)
#ifneq ("$(wildcard .env)","")
#include .env
#export
#endif
#
## –ú–∞–ø–ø–∏–Ω–≥ –ø–æ—Ä—Ç–∞ –≤ docker-compose: 6132:5432
#DB_HOST_PORT ?= 6132
#
## ========= Utils =========
## ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ë–î
#CID = $(shell $(COMPOSE) ps -q $(SERVICE))
#
## –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ö–æ—Å—Ç–∞
#DB_URL = postgres://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@127.0.0.1:$(DB_HOST_PORT)/$(POSTGRES_DB)?sslmode=disable
#
## ========= Targets =========
#.PHONY: help
#help:
#	@echo "Make targets:"
#	@echo "  build            - —Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑ $(IMAGE_NAME) –∏–∑ Dockerfile.bd"
#	@echo "  up               - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ë–î (–º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è –≤ entrypoint)"
#	@echo "  down             - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è volume)"
#	@echo "  destroy          - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥m–∞–ª–∏—Ç—å volume —Å –¥–∞–Ω–Ω—ã–º–∏"
#	@echo "  restart          - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ë–î (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø—Ä–æ–≥–æ–Ω –º–∏–≥—Ä–∞—Ü–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)"
#	@echo "  logs             - –ª–æ–≥–∏ –ë–î –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
#	@echo "  ps               - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ compose"
#	@echo "  wait             - –¥–æ–∂–¥–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Postgres (pg_isready)"
#	@echo "  migrate          - —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
#	@echo "  psql             - –æ—Ç–∫—Ä—ã—Ç—å psql –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
#	@echo "  psql-host        - –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è psql —Å —Ö–æ—Å—Ç–∞ –∫ localhost:$(DB_HOST_PORT)"
#	@echo "  url              - –ø–æ–∫–∞–∑–∞—Ç—å DSN –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ö–æ—Å—Ç–∞"
#	@echo "  backup FILE=...  - —Å–¥–µ–ª–∞—Ç—å pg_dump –≤ FILE (–Ω–∞ —Ö–æ—Å—Ç–µ)"
#	@echo "  restore FILE=... - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pg_restore –∏–∑ FILE (–Ω–∞ —Ö–æ—Å—Ç–µ)"
#	@echo "  shell            - shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
#
## --- CI-friendly: –Ω–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ –æ–±—Ä–∞–∑ —É–∂–µ –µ—Å—Ç—å
#.PHONY: build
#build:
#	docker build -f Dockerfile.bd -t $(IMAGE_NAME) .
#
#.PHONY: up
#up: build
#	$(COMPOSE) up -d $(SERVICE)
#
#.PHONY: down
#down:
#	$(COMPOSE) down
#
#.PHONY: destroy
#destroy:
#	$(COMPOSE) down -v
#
#.PHONY: restart
#restart:
#	$(COMPOSE) restart $(SERVICE)
#
#.PHONY: logs
#logs:
#	$(COMPOSE) logs -f $(SERVICE)
#
#.PHONY: ps
#ps:
#	$(COMPOSE) ps
#
#.PHONY: wait
#wait:
#	@[ -n "$(CID)" ] || (echo "Container not running. Starting..."; $(MAKE) up >/dev/null)
#	$(COMPOSE) exec -T $(SERVICE) sh -lc 'echo "‚è≥ waiting postgres..."; until pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB" -h 127.0.0.1 -p 5432; do sleep 1; done; echo "‚úÖ postgres is ready"'
#
## –í –≤–∞—Ä–∏–∞–Ω—Ç–µ A –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (entrypoint).
## –ù–æ –∏–Ω–æ–≥–¥–∞ –ø–æ–ª–µ–∑–Ω–æ —Ä—É–∫–∞–º–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π –∏ —Ö–æ—á–µ—à—å –¥–æ–±–∏—Ç—å—Å—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏).
#.PHONY: migrate
#migrate:
#	$(COMPOSE) exec -T $(SERVICE) sh -lc 'echo "üöÄ run migrations"; migrator up && echo "‚úÖ migrations done"'
#
#.PHONY: psql
#psql:
#	$(COMPOSE) exec $(SERVICE) sh -lc 'psql -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"'
#
#.PHONY: psql-host
#psql-host:
#	psql "$(DB_URL)"
#
#.PHONY: url
#url:
#	@echo "$(DB_URL)"
#
## –ë—ç–∫–∞–ø –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –•–û–°–¢–ï (–Ω—É–∂–Ω—ã pg_dump/pg_restore –Ω–∞ –º–∞—à–∏–Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
## –ü—Ä–∏–º–µ—Ä: make backup FILE=backup_$(shell date +%F).dump
#.PHONY: backup
#backup:
#ifndef FILE
#	$(error "–£–∫–∞–∂–∏ FILE: make backup FILE=backup.dump")
#endif
#	pg_dump --format=custom -d "$(DB_URL)" -f "$(FILE)"
#	@echo "‚úÖ dump saved to $(FILE)"
#
## –ü—Ä–∏–º–µ—Ä: make restore FILE=backup.dump
## –í–ù–ò–ú–ê–ù–ò–ï: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—Ç–∏—Ä–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—ä–µ–∫—Ç—ã –≤ –±–∞–∑–µ.
#.PHONY: restore
#restore:
#ifndef FILE
#	$(error "–£–∫–∞–∂–∏ FILE: make restore FILE=backup.dump")
#endif
#	pg_restore --clean --if-exists -d "$(DB_URL)" "$(FILE)"
#	@echo "‚úÖ restore done from $(FILE)"
#
#.PHONY: shell
#shell:
#	$(COMPOSE) exec $(SERVICE) sh -lc 'echo "$$PS1"; sh'
