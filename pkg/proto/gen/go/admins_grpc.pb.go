// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pkg/proto/admins.proto

package admin_history

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminHistoryService_GetUser_FullMethodName             = "/todo_proto.v1.AdminHistoryService/GetUser"
	AdminHistoryService_UsersList_FullMethodName           = "/todo_proto.v1.AdminHistoryService/UsersList"
	AdminHistoryService_UpdateUser_FullMethodName          = "/todo_proto.v1.AdminHistoryService/UpdateUser"
	AdminHistoryService_QuestionnairesList_FullMethodName  = "/todo_proto.v1.AdminHistoryService/QuestionnairesList"
	AdminHistoryService_GetQuestionnaire_FullMethodName    = "/todo_proto.v1.AdminHistoryService/GetQuestionnaire"
	AdminHistoryService_UpdateQuestionnaire_FullMethodName = "/todo_proto.v1.AdminHistoryService/UpdateQuestionnaire"
	AdminHistoryService_GetChat_FullMethodName             = "/todo_proto.v1.AdminHistoryService/GetChat"
	AdminHistoryService_ChatsList_FullMethodName           = "/todo_proto.v1.AdminHistoryService/ChatsList"
	AdminHistoryService_GetStatistics_FullMethodName       = "/todo_proto.v1.AdminHistoryService/GetStatistics"
)

// AdminHistoryServiceClient is the client API for AdminHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminHistoryServiceClient interface {
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	UsersList(ctx context.Context, in *UsersListRequest, opts ...grpc.CallOption) (*UsersListResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*Status, error)
	QuestionnairesList(ctx context.Context, in *QuestionnairesListRequest, opts ...grpc.CallOption) (*QuestionnairesListResponse, error)
	GetQuestionnaire(ctx context.Context, in *QuestionnaireRequest, opts ...grpc.CallOption) (*QuestionnaireResponse, error)
	UpdateQuestionnaire(ctx context.Context, in *UpdateQuestionnaireRequest, opts ...grpc.CallOption) (*Status, error)
	GetChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	ChatsList(ctx context.Context, in *ChatsListRequest, opts ...grpc.CallOption) (*ChatsListResponse, error)
	GetStatistics(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*StatisticsResponse, error)
}

type adminHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminHistoryServiceClient(cc grpc.ClientConnInterface) AdminHistoryServiceClient {
	return &adminHistoryServiceClient{cc}
}

func (c *adminHistoryServiceClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, AdminHistoryService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminHistoryServiceClient) UsersList(ctx context.Context, in *UsersListRequest, opts ...grpc.CallOption) (*UsersListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersListResponse)
	err := c.cc.Invoke(ctx, AdminHistoryService_UsersList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminHistoryServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, AdminHistoryService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminHistoryServiceClient) QuestionnairesList(ctx context.Context, in *QuestionnairesListRequest, opts ...grpc.CallOption) (*QuestionnairesListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuestionnairesListResponse)
	err := c.cc.Invoke(ctx, AdminHistoryService_QuestionnairesList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminHistoryServiceClient) GetQuestionnaire(ctx context.Context, in *QuestionnaireRequest, opts ...grpc.CallOption) (*QuestionnaireResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuestionnaireResponse)
	err := c.cc.Invoke(ctx, AdminHistoryService_GetQuestionnaire_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminHistoryServiceClient) UpdateQuestionnaire(ctx context.Context, in *UpdateQuestionnaireRequest, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, AdminHistoryService_UpdateQuestionnaire_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminHistoryServiceClient) GetChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, AdminHistoryService_GetChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminHistoryServiceClient) ChatsList(ctx context.Context, in *ChatsListRequest, opts ...grpc.CallOption) (*ChatsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatsListResponse)
	err := c.cc.Invoke(ctx, AdminHistoryService_ChatsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminHistoryServiceClient) GetStatistics(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*StatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatisticsResponse)
	err := c.cc.Invoke(ctx, AdminHistoryService_GetStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminHistoryServiceServer is the server API for AdminHistoryService service.
// All implementations must embed UnimplementedAdminHistoryServiceServer
// for forward compatibility.
type AdminHistoryServiceServer interface {
	GetUser(context.Context, *UserRequest) (*UserResponse, error)
	UsersList(context.Context, *UsersListRequest) (*UsersListResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*Status, error)
	QuestionnairesList(context.Context, *QuestionnairesListRequest) (*QuestionnairesListResponse, error)
	GetQuestionnaire(context.Context, *QuestionnaireRequest) (*QuestionnaireResponse, error)
	UpdateQuestionnaire(context.Context, *UpdateQuestionnaireRequest) (*Status, error)
	GetChat(context.Context, *ChatRequest) (*ChatResponse, error)
	ChatsList(context.Context, *ChatsListRequest) (*ChatsListResponse, error)
	GetStatistics(context.Context, *StatisticsRequest) (*StatisticsResponse, error)
	mustEmbedUnimplementedAdminHistoryServiceServer()
}

// UnimplementedAdminHistoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminHistoryServiceServer struct{}

func (UnimplementedAdminHistoryServiceServer) GetUser(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAdminHistoryServiceServer) UsersList(context.Context, *UsersListRequest) (*UsersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersList not implemented")
}
func (UnimplementedAdminHistoryServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAdminHistoryServiceServer) QuestionnairesList(context.Context, *QuestionnairesListRequest) (*QuestionnairesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuestionnairesList not implemented")
}
func (UnimplementedAdminHistoryServiceServer) GetQuestionnaire(context.Context, *QuestionnaireRequest) (*QuestionnaireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionnaire not implemented")
}
func (UnimplementedAdminHistoryServiceServer) UpdateQuestionnaire(context.Context, *UpdateQuestionnaireRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestionnaire not implemented")
}
func (UnimplementedAdminHistoryServiceServer) GetChat(context.Context, *ChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChat not implemented")
}
func (UnimplementedAdminHistoryServiceServer) ChatsList(context.Context, *ChatsListRequest) (*ChatsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatsList not implemented")
}
func (UnimplementedAdminHistoryServiceServer) GetStatistics(context.Context, *StatisticsRequest) (*StatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}
func (UnimplementedAdminHistoryServiceServer) mustEmbedUnimplementedAdminHistoryServiceServer() {}
func (UnimplementedAdminHistoryServiceServer) testEmbeddedByValue()                             {}

// UnsafeAdminHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminHistoryServiceServer will
// result in compilation errors.
type UnsafeAdminHistoryServiceServer interface {
	mustEmbedUnimplementedAdminHistoryServiceServer()
}

func RegisterAdminHistoryServiceServer(s grpc.ServiceRegistrar, srv AdminHistoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminHistoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminHistoryService_ServiceDesc, srv)
}

func _AdminHistoryService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminHistoryServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminHistoryService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminHistoryServiceServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminHistoryService_UsersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminHistoryServiceServer).UsersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminHistoryService_UsersList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminHistoryServiceServer).UsersList(ctx, req.(*UsersListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminHistoryService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminHistoryServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminHistoryService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminHistoryServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminHistoryService_QuestionnairesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionnairesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminHistoryServiceServer).QuestionnairesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminHistoryService_QuestionnairesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminHistoryServiceServer).QuestionnairesList(ctx, req.(*QuestionnairesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminHistoryService_GetQuestionnaire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionnaireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminHistoryServiceServer).GetQuestionnaire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminHistoryService_GetQuestionnaire_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminHistoryServiceServer).GetQuestionnaire(ctx, req.(*QuestionnaireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminHistoryService_UpdateQuestionnaire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionnaireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminHistoryServiceServer).UpdateQuestionnaire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminHistoryService_UpdateQuestionnaire_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminHistoryServiceServer).UpdateQuestionnaire(ctx, req.(*UpdateQuestionnaireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminHistoryService_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminHistoryServiceServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminHistoryService_GetChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminHistoryServiceServer).GetChat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminHistoryService_ChatsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminHistoryServiceServer).ChatsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminHistoryService_ChatsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminHistoryServiceServer).ChatsList(ctx, req.(*ChatsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminHistoryService_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminHistoryServiceServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminHistoryService_GetStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminHistoryServiceServer).GetStatistics(ctx, req.(*StatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminHistoryService_ServiceDesc is the grpc.ServiceDesc for AdminHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todo_proto.v1.AdminHistoryService",
	HandlerType: (*AdminHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _AdminHistoryService_GetUser_Handler,
		},
		{
			MethodName: "UsersList",
			Handler:    _AdminHistoryService_UsersList_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AdminHistoryService_UpdateUser_Handler,
		},
		{
			MethodName: "QuestionnairesList",
			Handler:    _AdminHistoryService_QuestionnairesList_Handler,
		},
		{
			MethodName: "GetQuestionnaire",
			Handler:    _AdminHistoryService_GetQuestionnaire_Handler,
		},
		{
			MethodName: "UpdateQuestionnaire",
			Handler:    _AdminHistoryService_UpdateQuestionnaire_Handler,
		},
		{
			MethodName: "GetChat",
			Handler:    _AdminHistoryService_GetChat_Handler,
		},
		{
			MethodName: "ChatsList",
			Handler:    _AdminHistoryService_ChatsList_Handler,
		},
		{
			MethodName: "GetStatistics",
			Handler:    _AdminHistoryService_GetStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/admins.proto",
}
